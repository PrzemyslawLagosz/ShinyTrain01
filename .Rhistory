group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = round(mean(price), 2),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
#5
dane_summary <- dane %>%
group_by(color) %>%
summarise(liczba_obserwacji = n(),
srednia_cena = round(mean(price)),
mediana_ceny = median(price),
trzeci_kwartyl = quantile(price, probs = .75),
srednia_cena = mean(carat),
mediana_ceny = median(carat),
pierwszy_kwartyl = quantile(price, probs = .25))
x <- dane_summary
View(x)
x$srednia_cena <- round(x$srednia_cena)
x$srednia_cena <- round(x$srednia_cena, 3)
x <- dane_summary
x$srednia_cena <- round(x$srednia_cena, 3)
x <- transpose(dane_summary)
x <- dane_summary
x$srednia_cena <- round(x$srednia_cena, 3)
x <- transpose(x)
colnames(x) <- x[1, ]
x <- x[-1, ]
colnames(dane_summary)
nowy_columna <- colnames(dane_summary)[2:]
nowy_columna <- colnames(dane_summary)[2:-1]
nowy_columna <- colnames(dane_summary)[2:5]
nowy_columna
nowy_columna <- colnames(dane_summary)[2:length(colnames(dane_summary))]
nowy_columna
x <- x %>%
mutate(typ_danej = nowy_columna)
t(dane_summary)
str(t(dane_summary))
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
reactive(get(input$dataset, "package:datasets"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
#message(data)
output$data <- renderTable(head(data()))
}
shinyApp(ui, server)
}
datasetApp()
library(shiny)
datasetApp()
datasetApp()
runApp('R/leaRn/Shiny/Mastering Shiny book/5_modules/app_mastering_shiny_5.4_exercise.R')
datasetApp()
datasetApp()
runApp('R/leaRn/Shiny/Mastering Shiny book/5_modules/app_mastering_shiny_5.4_exercise.R')
datasetApp()
eventReactive(input$dataset, message("kupka"))
datasetApp()
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
eventReactive(input$dataset, message("kupka"))
reactive(get(input$dataset, "package:datasets"))
})
}
buttonUI <- function(id) {
actionButton(NS(id, "click"), "Press me!")
}
buttonServer <- function(id) {
moduleServer(id, function(input, output, session)
{
eventReactive(input$click, message("kupka"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo")
}
shinyApp(ui, server)
}
datasetApp()
buttonServer <- function(id) {
moduleServer(id, function(input, output, session)
{
observeEvent(input$click, message("kupka"))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo")
}
shinyApp(ui, server)
}
datasetApp()
datasetInput <- function(id, filter = NULL) {
names <- ls("package:datasets")
if (!is.null(filter)) {
data <- lapply(names, get, "package:datasets")
names <- names[vapply(data, filter, logical(1))]
}
selectInput(NS(id, "dataset"), "Pick a dataset", choices = names)
}
datasetServer <- function(id) {
moduleServer(id, function(input, output, session) {
eventReactive(input$dataset, message("kupka"))
reactive(get(input$dataset, "package:datasets"))
})
}
buttonUI <- function(id) {
actionButton(NS(id, "click"), "Press me!")
}
buttonServer <- function(id, value) {
moduleServer(id, function(input, output, session)
{
observeEvent(input$click, message(value))
})
}
datasetApp <- function(filter = NULL) {
ui <- fluidPage(
buttonUI("elo"),
datasetInput("dataset", filter = filter),
#datasetInput("dataset3", filter = filter),
tableOutput("data")
)
server <- function(input, output, session) {
data <- datasetServer("dataset")
output$data <- renderTable(head(data()))
buttonServer("elo", data())
}
shinyApp(ui, server)
}
datasetApp()
### SELECT VAR MODULES ###
selectVarInput <- function(id) {
selectInput(NS(id, "var"), "Variable", choices = NULL)
}
find_vars <- function(data, filter) {
names(data)[vapply(data, filter, logical(1))]
}
### SELECT VAR MODULES ###
selectVarInput <- function(id) {
selectInput(NS(id, "var"), "Variable", choices = NULL)
}
find_vars <- function(data, filter) {
names(data)[vapply(data, filter, logical(1))]
}
selectVarServer <- function(id, data, filter = is.numeric) {
moduleServer(id, function(input, output, session){
observeEvent(data(), {
updateSelectInput(session, "var", choices = find_vars(data(), filter))
})
reactive(data()[[input$var]])
})
}
selectVarApp <- function(filter = is.numeric) {
ui <- fluidPage(
datasetInput("data", is.data.frame),
selectVarInput("var"),
verbatimTextOutput("out")
)
server <- function(input, output, session) {
data <- datasetServer("data")
var <- selectVarServer("var", data, filter = filter)
output$out <- renderPrint(var())
}
shinyApp(ui, server)
}
selectVarApp()
runApp('R/leaRn/Shiny/Moodtracker/moodApp.R')
runApp('R/leaRn/Shiny/Moodtracker/moodApp.R')
saved_passwords <- read_csv("C:\\Users\\Przemo\\Documents\\R\\leaRn\\Shiny\\Moodtracker\\saved_passwords.csv")
saved_passwords
saved_users_list
saved_passwords
which(saved_passwords$user_pas == test123)
which(saved_passwords$user_pas == "test123")
which(saved_passwords$user_pas == "tester1234")
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
library(PogromcyDanych)
library(tidyverse)
library(dplyr)
library(purrr)
auta <- auta2012
save(auta, file = "auta.RData")
dim(auta)
nrow(auta)
ncol(auta)
colnames(auta)
for (col in colnames(auta)) {
cat(col, sum(is.na(auta[col])), "\n")
}
sapply(auta, function(x) sum(is.na(x)))
colSums(is.na(auta))
top_5_mean_price <- auta %>%
group_by(Marka) %>%
summarise(mean_price = mean(Cena.w.PLN)) %>%
arrange(-mean_price)
top_5_mean_price <- top_5_mean_price[1:5, ]
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(top_5_mean_price, aes(x = reorder(Marka, -mean_price), y= mean_price/1000, fill = Marka)) +
geom_col() +
geom_hline(yintercept = mean(top_5_mean_price$mean_price)/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(top_5_mean_price$mean_price)/1000,
x = nrow(top_5_mean_price),
vjust = -1)+
labs(
title = "Mean price",
subtitle = "Top 5",
x = NULL,
y = "Price"
) +
scale_fill_manual(values = cbPalette) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
plot.margin=unit(c(1,1,1,0.5), 'cm'))
range(auta$Rok.produkcji)
table(auta$Rok.produkcji)
format(99999999,scientific = FALSE)
table(cut(auta$Rok.produkcji, 10))
seqlast <- function (from, to, by)
{
vec <- seq(from, to, by)
if ( tail(vec, 1) != to ) {
return(c(vec, to))
} else {
return(vec)
}
}
intervals <- seqlast(min(auta$Rok.produkcji), max(auta$Rok.produkcji), 5)
intervals
group_year <- cut(auta$Rok.produkcji, intervals, dig.lab = 5)
group_year
auta <- auta %>%
mutate(group_year = group_year)
mean_price_5year_interval_df <- auta %>%
group_by(group_year) %>%
summarise(mean_price_group_year = mean(Cena.w.PLN),
median_price_group_year = median(Cena.w.PLN)) %>%
arrange(group_year)  %>%
drop_na()
mean_price_5year_interval_df
ggplot(mean_price_5year_interval_df, aes(x = reorder(group_year, group_year), y= mean_price_group_year/1000)) +
geom_col() +
geom_hline(yintercept = mean(mean_price_5year_interval_df$mean_price_group_year)/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(mean_price_5year_interval_df$mean_price_group_year)/1000,
x = nrow(mean_price_5year_interval_df)-1,
vjust = -1)+
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_fill_manual(values = cbPalette) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5))
mean_price_group_year_petrol_type_df <- auta %>%
filter(Rodzaj.paliwa %in% c("benzyna", "benzyna+LPG", "olej napedowy (diesel)")) %>%
group_by(Rodzaj.paliwa, group_year) %>%
summarise(mean_price = mean(Cena.w.PLN)) %>%
drop_na()
df <- split(mean_price_group_year_petrol_type_df, factor(mean_price_group_year_petrol_type_df$Rodzaj.paliwa))
ggplot(as.data.frame(df[1]), aes(x = benzyna.group_year, y = benzyna.mean_price)) +
geom_point()
mean_price_group_year_petrol_type_df <- auta %>%
filter(Rodzaj.paliwa %in% c("benzyna", "benzyna+LPG", "olej napedowy (diesel)")) %>%
group_by(Rodzaj.paliwa, group_year) %>%
summarise(mean_price = mean(Cena.w.PLN)) %>%
drop_na()
ggplot(mean_price_5year_interval_df, aes(x = reorder(group_year, group_year), y= mean_price_group_year/1000)) +
geom_col() +
geom_hline(yintercept = mean(mean_price_5year_interval_df$mean_price_group_year)/1000,
linetype='dashed')+
annotate(geom = "text",
label = "Mean price",
y = mean(mean_price_5year_interval_df$mean_price_group_year)/1000,
x = nrow(mean_price_5year_interval_df)-1,
vjust = -1)+
labs(
title = "Mean price",
subtitle = "Interval 10 years",
x = NULL,
y = "Price"
) +
scale_fill_manual(values = cbPalette) +
scale_y_continuous(labels = scales::number_format(suffix = " k")) +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 0.5))
View(auta)
View(auta)
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
interval_df''
interval_df
interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 5)
interval_group_by(auta, Rok.produkcji, Cena, 5)
View(auta)
interval_group_by(auta, Rok.produkcji, Pojemnosc.skokowa, 5)
colnames(auta)
interval_group_by(auta, Rok.produkcji, Przebieg.w.km, 5)
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
interval_group_by <- function(df, column_interval, column_calculate, interval, dig.lab = 5) {
# DF to coalculeta
# column_interval <- column turned into intervals with cut and group_by
# column_calcularte <- column to calculate mean and median in intervals
# interval <- value of the interval
browser()
column_interval <- enquo(column_interval)
column_calculate <- enquo(column_calculate)
df_grouped_by_interval <- df %>%
mutate(year_intervals = cut(!!column_interval, seq_last(!!column_interval, interval), dig.lab = dig.lab)) %>%
group_by(year_intervals) %>%
summarise(mean_by_interval = mean(!!column_calculate),
median_by_interval = median(!!column_calculate)) %>%
drop_na()
return(df_grouped_by_interval)
}
interval_df <- interval_group_by(auta, Rok.produkcji, Cena.w.PLN, 13)
!!~Cena
~Cena
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('R/leaRn/Shiny/Mastering Shiny book/1/app_mastering_shiny_1.3.R')
runApp('R/leaRn/Shiny/Mastering Shiny book/3_case_study/app_mastering_shiny_3.1_polished.R')
runApp('R/leaRn/Shiny/Mastering Shiny book/10_dynamic_UI/app_mastering_shiny_10.1_update_function.R')
runApp('R/leaRn/Shiny/Mastering Shiny book/10_dynamic_UI/app_mastering_shiny_10.1_update_function.R')
tmp3
tmp3 <- unlist(map(auta2[numericColnames], function(x) max(x, na.rm = T)-min(x, na.rm = T)))
auta2 <- auta %>%
filter(Przebieg.w.km < mask1 & KM < 1100 & Pojemnosc.skokowa < 18000)
tmp3 <- unlist(map(auta2[numericColnames], function(x) max(x, na.rm = T)-min(x, na.rm = T)))
tmp3
?swich
??swich
xdd <- function(x) {
switch(interval_variable,
"Cena" = list(min = 10, max =100),
"KM" = list(min = 1, max =10))
}
xdd("Cena")
xdd <- function(interval_variable) {
switch(interval_variable,
"Cena" = list(min = 10, max =100),
"KM" = list(min = 1, max =10))
}
xdd("Cena")
temp <- xdd("Cena")
temp$min
tmp3
10e+3
output$text <- renderText(displayText())
runApp('R/leaRn/Shiny/Problems/updateModuleFromAnotherModule.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
library(shiny); runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
traceback()
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
traceback()
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/Reprex/reprex.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp()
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
interval_input_values <- function(interval_variable) {
switch(interval_variable,
"Cena" = list(min = 10e+3, max = 10e+5, step = 10e+3),
"Cena.w.PLN" = list(min = 10e+3, max = 10e+5, step = 10e+3),
"KM" = list(min = 10, max = 100, step = 10),
"kW" = list(min = 10, max = 100, step = 10),
"Pojemnosc.skokowa" = list(min = 100, max = 1000, step = 100),
"Przebieg.w.km" = list(min = 10e+3, max = 10e+5, step = 10e+3),
"Rok.produkcji" = list(min = 1, max = 10, step = 1),
)
}
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
traceback()
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
?debounce
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/computing after update problem/computeAfterupdate.R')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01/computing after update problem/computeAfterupdate.R')
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
seq_last(auta$Cena)
seq_last(auta$Cena, 100)
seq_last(auta$Rok.produkcji, 100)
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
seq_last(auta$Rok.produkcji), 10)
seq_last(auta$Rok.produkcji, 10)
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
shiny::runApp('C:/Users/Przemo/Desktop/IT/R/TrainShiny01')
load("auta.Rdata") ######## TU JEST PROBLEM
library(tidyverse)
library(ggplot2)
library(shiny)
library(rlang)
library(zeallot)
library(shinydashboard)
setwd("C:/Users/Przemo/Desktop/IT/R/TrainShiny01.2")
write_csv(auta,"auta.csv")
df <- read_csv("auta.csv")
View(df)
runApp()
runApp()
runApp()
runApp()
